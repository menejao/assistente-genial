import streamlit as st
from dotenv import load_dotenv
from docx import Document
import os
import json
from datetime import datetime
from sqlalchemy import create_engine, Column, Integer, String, Text, DateTime
from sqlalchemy.ext.declarative import declarative_base
from sqlalchemy.orm import sessionmaker
from langchain.chat_models import ChatOpenAI
from langchain.schema import HumanMessage
from reportlab.lib.pagesizes import letter
from reportlab.platypus import SimpleDocTemplate, Paragraph, Spacer
from reportlab.lib.styles import getSampleStyleSheet
import pdfplumber
import tempfile
import base64

# Configura√ß√£o inicial
load_dotenv()
Base = declarative_base()

# Modelo do banco de dados
class Analise(Base):
    __tablename__ = 'analises'
    id = Column(Integer, primary_key=True)
    nome = Column(String(100))
    tipo = Column(String(20))
    texto_original = Column(Text)
    resultado = Column(Text)
    criado_em = Column(DateTime, default=datetime.now)

# Fun√ß√µes auxiliares
def init_db():
    engine = create_engine('sqlite:///analises.db')
    Base.metadata.create_all(engine)
    return sessionmaker(bind=engine)

def get_ai_model():
    return ChatOpenAI(
        model_name="mistralai/mistral-7b-instruct",
        temperature=0.3,
        max_tokens=2000,
        openai_api_key=os.getenv("OPENROUTER_API_KEY"),
        base_url="https://openrouter.ai/api/v1"
    )

def extract_text(file, filename):
    if filename.endswith('.docx'):
        doc = Document(file)
        return '\n'.join([p.text for p in doc.paragraphs if p.text.strip()])
    elif filename.endswith('.pdf'):
        with pdfplumber.open(file) as pdf:
            return '\n'.join([page.extract_text() or '' for page in pdf.pages])
    return ''

def analyze_content(content, content_type, ai_model):
    prompts = {
        'TCC': "Analise este TCC como um professor universit√°rio, avaliando estrutura, conte√∫do acad√™mico e originalidade:",
        'curr√≠culo': "Avalie este curr√≠culo como um especialista em RH, destacando pontos fortes, fracos e sugest√µes:",
        'financeiro': "Analise este documento financeiro como um contador experiente, verificando consist√™ncia e problemas:",
        'design': "Avalie este design de interface como um expert em UX/UI, sugerindo melhorias:",
        'outro': "Analise este documento de forma cr√≠tica e profissional:"
    }
    
    if content_type == 'imagem':
        return ai_model.invoke([
            HumanMessage(content=[
                {"type": "text", "text": prompts['design']},
                {"type": "image_url", "image_url": {
                    "url": f"data:image/jpeg;base64,{base64.b64encode(content).decode()}"
                }}
            ])
        ]).content
    else:
        prompt = prompts.get(content_type, prompts['outro']) + f"\n\n{content}"
        return ai_model.invoke([HumanMessage(content=prompt)]).content

def create_pdf(content):
    with tempfile.NamedTemporaryFile(delete=False, suffix='.pdf') as tmp:
        doc = SimpleDocTemplate(tmp.name, pagesize=letter)
        styles = getSampleStyleSheet()
        story = [Paragraph("Relat√≥rio de An√°lise", styles['Title'])]
        story.append(Spacer(1, 12))
        story.append(Paragraph(content, styles['BodyText']))
        doc.build(story)
        return tmp.name

# Interface principal
def main():
    st.set_page_config(page_title="Analisador de Documentos", layout="wide")
    
    Session = init_db()
    ai_model = get_ai_model()
    
    st.title("üìÑ Analisador de Documentos com IA")
    
    tab1, tab2 = st.tabs(["Nova An√°lise", "Hist√≥rico"])
    
    with tab1:
        st.header("Enviar novo documento")

        col1, col2 = st.columns(2)
        with col1:
            uploaded_file = st.file_uploader("Carregar arquivo", type=['pdf', 'docx', 'png', 'jpg'])
        with col2:
            user_name = st.text_input("Seu nome", max_chars=50)

        doc_type = st.selectbox("Tipo de documento", ["TCC", "curr√≠culo", "financeiro", "design", "outro"])
        manual_text = st.text_area("Ou cole o texto aqui", height=150)

        if st.button("Analisar", type="primary"):
            if not (uploaded_file or manual_text.strip()) or not user_name.strip():
                st.error("Preencha todos os campos obrigat√≥rios")
            else:
                with st.spinner("Processando..."):
                    try:
                        if uploaded_file:
                            file_content = uploaded_file.read()
                            if uploaded_file.name.lower().endswith(('.png', '.jpg', '.jpeg')):
                                file_type = 'imagem'
                                content_to_analyze = file_content
                            else:
                                file_type = 'texto'
                                content_to_analyze = extract_text(uploaded_file, uploaded_file.name)
                        else:
                            file_type = 'texto'
                            content_to_analyze = manual_text
                        
                        analysis_result = analyze_content(content_to_analyze, doc_type, ai_model)

                        with Session() as session:
                            session.add(Analise(
                                nome=user_name,
                                tipo=doc_type,
                                texto_original=content_to_analyze[:10000],
                                resultado=analysis_result
                            ))
                            session.commit()

                        st.success("An√°lise conclu√≠da!")
                        st.markdown(f"**Resultado:**\n\n{analysis_result}")

                        pdf_file = create_pdf(analysis_result)
                        with open(pdf_file, "rb") as f:
                            st.download_button("Baixar PDF", f, "analise.pdf")
                    
                    except Exception as e:
                        st.error(f"Erro: {str(e)}")
    
    with tab2:
        st.header("An√°lises anteriores")
        
        search_name = st.text_input("Buscar por nome")
        if search_name:
            with Session() as session:
                analyses = session.query(Analise)\
                    .filter(Analise.nome == search_name)\
                    .order_by(Analise.criado_em.desc())\
                    .all()
                
                if not analyses:
                    st.info("Nenhuma an√°lise encontrada")
                else:
                    for analysis in analyses:
                        with st.expander(f"{analysis.tipo} - {analysis.criado_em.strftime('%d/%m/%Y %H:%M')}"):
                            st.write(analysis.resultado)
                            pdf_file = create_pdf(analysis.resultado)
                            with open(pdf_file, "rb") as f:
                                st.download_button(
                                    "Baixar PDF",
                                    f,
                                    f"analise_{analysis.id}.pdf"
                                )

if __name__ == "__main__":
    main()
